# -------- START --------
START -> GENERAL_STMT

# -------- GENERAL STATEMENT --------
GENERAL_STMT -> CONDITIONAL_BODY
GENERAL_STMT -> DEFS_STMT
GENERAL_STMT -> TRY_CATCH
GENERAL_STMT -> THROW_STMT
GENERAL_STMT -> ENTER_STMT
GENERAL_STMT -> GENERAL_STMT ENTER_STMT
GENERAL_STMT -> ENTER_STMT GENERAL_STMT
GENERAL_STMT -> GENERAL_STMT GENERAL_STMT
GENERAL_STMT -> FUNCTION_STMT
GENERAL_STMT -> LOOP_STMT
GENERAL_STMT -> DELETE_STMT
GENERAL_STMT -> OBJECT_STMT
GENERAL_STMT -> EXPRESSION
GENERAL_STMT_2 -> GENERAL_STMT
GENERAL_STMT_2 -> GENERAL_STMT_2 ENTER RETURN_STMT
GENERAL_STMT_2 -> RETURN_STMT

# -------- CONDITIONAL STATEMENT --------
CONDITIONAL_BODY -> SWITCH_STMT
CONDITIONAL_BODY -> IF_STMT
GENERAL_STMT -> DEFS_STMT
GENERAL_STMT -> TRY_CATCH
GENERAL_STMT -> THROW_STMT
CONDITIONAL_BODY -> CONDITIONAL_BODY
CONDITIONAL_BODY -> CONDITIONAL_BODY ENTER_STMT CONDITIONAL_BODY
CONDITIONAL_BODY -> GENERAL_STMT

# . SWITCH STATEMENT
SWITCH_STMT -> SWITCH ( VAR_NAME ) ENTER { ENTER CASE_STMT ENTER }
SWITCH_STMT -> SWITCH ( VAR_NAME ) ENTER { ENTER CASE_DEF ENTER }

CASE_DEF -> DEFAULT : ENTER_STMT EXPRESSION BREAK
CASE_DEF -> DEFAULT : ENTER_STMT CONDITIONAL_STMT BREAK
CASE_DEF -> DEFAULT : ENTER_STMT GENERAL_STMT BREAK
CASE_DEF -> DEFAULT : ENTER_STMT BREAK
CASE_STMT -> CASE INT : ENTER_STMT EXPRESSION ENTER_STMT BREAK CASE_DEF
CASE_STMT -> CASE INT : ENTER_STMT CONDITIONAL_STMT ENTER_STMT BREAK CASE_DEF
CASE_STMT -> CASE INT : ENTER_STMT GENERAL_STMT ENTER_STMT BREAK CASE_DEF
CASE_STMT -> CASE INT : ENTER_STMT BREAK CASE_DEF

# . FUNCTION
FUNCTION_STMT -> FUNCTION
FUNCTION_STMT -> ASYNC_FUNCTION
FUNCTION_STMT -> FUNCTION_CALL

FUNCTION_BODY -> GENERAL_STMT
FUNCTION_BODY -> RETURN_STMT
FUNCTION_BODY -> FUNCTION_BODY ENTER_STMT FUNCTION_BODY
FUNCTION_BODY_ASYNC -> FUNCTION_BODY
FUNCTION_BODY_ASYNC -> AWAIT FUNCTION_BODY

FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER_STMT FUNCTION_BODY 
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER_STMT { ENTER_STMT FUNCTION_BODY ENTER_STMT }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER_STMT { ENTER_STMT FUNCTION_BODY }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER_STMT FUNCTION_BODY 
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) { ENTER_STMT FUNCTION_BODY ENTER_STMT }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) { ENTER_STMT FUNCTION_BODY }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER_STMT FUNCTION_BODY 
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER_STMT { ENTER_STMT FUNCTION_BODY ENTER_STMT }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER_STMT { ENTER_STMT FUNCTION_BODY }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) { ENTER_STMT FUNCTION_BODY ENTER_STMT }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) { ENTER_STMT FUNCTION_BODY }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER_STMT FUNCTION_BODY ENTER_STMT
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER_STMT { ENTER_STMT FUNCTION_BODY ENTER_STMT } ENTER_STMT
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER_STMT { ENTER_STMT FUNCTION_BODY } ENTER_STMT
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) { ENTER_STMT FUNCTION_BODY ENTER_STMT } ENTER_STMT
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) { ENTER_STMT FUNCTION_BODY } ENTER_STMT
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER_STMT FUNCTION_BODY ENTER_STMT
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER_STMT { ENTER_STMT FUNCTION_BODY ENTER_STMT } ENTER_STMT
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER_STMT { ENTER_STMT FUNCTION_BODY } ENTER_STMT
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) { ENTER_STMT FUNCTION_BODY ENTER_STMT } ENTER_STMT
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) { ENTER_STMT FUNCTION_BODY } ENTER_STMT
ASYNC_FUNCTION -> ASYNC FUNCTION FUNCTION_NAME ( PARAMS ) ENTER_STMT FUNCTION_BODY_ASYNC 
PARAMS -> VAR_NAME
PARAMS -> VAR_NAME , PARAMS
PARAMS -> VAR_NAME = DATA
PARAMS -> VAR_NAME = DATA , PARAMS
FUNCTION_NAME -> VAR_NAME
FUNCTION_CALL -> FUNCTION_NAME ( ARGS ) ENTER_STMT
FUNCTION_CALL -> CLASS . FUNCTION_NAME ( ARGS ) ENTER_STMT
CLASS -> VAR_NAME
ARGS -> DATA
ARGS -> DATA , ARGS
ARGS -> VAR_NAME = DATA
ARGS -> VAR_NAME = DATA , ARGS
RETURN_STMT -> RETURN DATA ENTER_STMT
RETURN_STMT -> RETURN ENTER_STMT

# . IF ELIF ELSE
IF_STMT -> IF ( EXP_STMT ) ENTER_STMT { CONDITIONAL_BODY }
IF_STMT -> IF ( EXP_STMT ) ENTER_STMT { EXP_STMT }
IF_STMT -> IF ( EXP_STMT ) { CONDITIONAL_BODY }
IF_STMT -> IF ( EXP_STMT ) { EXP_STMT }
IF_STMT -> IF ( EXP_STMT ) ENTER_STMT { CONDITIONAL_BODY } IF_PART_A
IF_STMT -> IF ( EXP_STMT ) ENTER_STMT { EXP_STMT } IF_PART_A
IF_STMT -> IF ( EXP_STMT ) { CONDITIONAL_BODY } IF_PART_A
IF_STMT -> IF ( EXP_STMT ) { EXP_STMT } IF_PART_A
IF_PART_A -> ELIF ( EXP_STMT ) { CONDITIONAL_BODY }
IF_PART_A -> ELIF ( EXP_STMT ) ENTER_STMT { CONDITIONAL_BODY }
IF_PART_A -> ELIF ( EXP_STMT ) { EXP_STMT }
IF_PART_A -> ELIF ( EXP_STMT ) ENTER_STMT { EXP_STMT }
IF_PART_A -> ELIF ( EXP_STMT ) { CONDITIONAL_BODY } IF_PART_A
IF_PART_A -> ELIF ( EXP_STMT ) ENTER_STMT { CONDITIONAL_BODY } IF_PART_A
IF_PART_A -> ELIF ( EXP_STMT ) { EXP_STMT } IF_PART_A
IF_PART_A -> ELIF ( EXP_STMT ) ENTER_STMT { EXP_STMT } IF_PART_A
IF_PART_A -> ELIF ( EXP_STMT ) { CONDITIONAL_BODY } IF_PART_B
IF_PART_A -> ELIF ( EXP_STMT ) ENTER_STMT { CONDITIONAL_BODY } IF_PART_B
IF_PART_A -> ELIF ( EXP_STMT ) { EXP_STMT } IF_PART_B
IF_PART_A -> ELIF ( EXP_STMT ) ENTER_STMT { EXP_STMT } IF_PART_B
IF_STMT -> IF ( EXP_STMT ) ENTER_STMT { CONDITIONAL_BODY } IF_PART_B
IF_STMT -> IF ( EXP_STMT ) ENTER_STMT { EXP_STMT } IF_PART_B
IF_STMT -> IF ( EXP_STMT ) { CONDITIONAL_BODY } IF_PART_B
IF_STMT -> IF ( EXP_STMT ) { EXP_STMT } IF_PART_B
IF_PART_B -> ELSE { CONDITIONAL_BODY }
IF_PART_B -> ELSE ENTER_STMT { CONDITIONAL_BODY }
IF_PART_B -> ELSE { EXP_STMT }
IF_PART_B -> ELSE ENTER_STMT { EXP_STMT }
IF_STMT_2 -> IF_STMT
IF_STMT_2 -> IF ( EXPRESSION ) ENTER_STMT { CON_LOOP }
IF_STMT_2 -> IF ( EXPRESSION ) { CON_LOOP }
IF_STMT_2 -> IF ( EXPRESSION ) ENTER_STMT { CON_LOOP } IF_PART_A_2
IF_STMT_2 -> IF ( EXPRESSION ) { CON_LOOP } IF_PART_A_2
IF_STMT_2 -> IF ( EXPRESSION ) ENTER_STMT { CON_LOOP } IF_PART_B_2
IF_STMT_2 -> IF ( EXPRESSION ) { CON_LOOP } IF_PART_B_2
CON_LOOP -> ENTER_STMT CON_LOOP
CON_LOOP -> CON_LOOP ENTER_STMT CON_LOOP
CON_LOOP -> CON_LOOP ENTER_STMT
CON_LOOP -> ENTER_STMT
CON_LOOP -> CONDITIONAL_BODY
CON_LOOP -> CONTINUE
CON_LOOP -> BREAK

# -------- TRY CATCH -------- (finally also included)
TRY_CATCH -> TRY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 }  CATCH ( VAR_NAME ) ENTER_STMT { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) ENTER_STMT { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 }  CATCH ( VAR_NAME ) { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 } FINALLY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY { ENTER_STMT GENERAL_STMT_2 } FINALLY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 } FINALLY { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY { ENTER_STMT GENERAL_STMT_2 } FINALLY { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) ENTER_STMT { ENTER_STMT GENERAL_STMT_2 } FINALLY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) ENTER_STMT { ENTER_STMT GENERAL_STMT_2 } FINALLY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) { ENTER_STMT GENERAL_STMT_2 } FINALLY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) { ENTER_STMT GENERAL_STMT_2 } FINALLY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) ENTER_STMT { ENTER_STMT GENERAL_STMT_2 } FINALLY { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) ENTER_STMT { ENTER_STMT GENERAL_STMT_2 } FINALLY { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY ENTER_STMT { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) { ENTER_STMT GENERAL_STMT_2 } FINALLY { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) { ENTER_STMT GENERAL_STMT_2 } FINALLY { ENTER_STMT GENERAL_STMT_2 }
TRY_CATCH -> TRY { ENTER_STMT GENERAL_STMT_2 } CATCH ( VAR_NAME ) { ENTER_STMT GENERAL_STMT_2 } FINALLY { ENTER_STMT GENERAL_STMT_2 }

# -------- LOOP --------
LOOP_STMT -> DO_WHILE
LOOP_STMT -> WHILE_STMT
LOOP_STMT -> FOR_STMT
LOOP_BODY -> GENERAL_STMT
LOOP_BODY -> ENTER_STMT
LOOP_BODY -> CONTINUE
LOOP_BODY -> LOOP_BODY ENTER_STMT LOOP_BODY
LOOP_BODY -> LOOP_BODY ENTER_STMT
LOOP_BODY -> IF_STMT_2

# . FOR
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { ENTER_STMT LOOP_BODY ENTER_STMT }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { ENTER_STMT LOOP_BODY }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { LOOP_BODY ENTER_STMT }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER_STMT { ENTER_STMT LOOP_BODY ENTER_STMT }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER_STMT { LOOP_BODY ENTER_STMT }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER_STMT { ENTER_STMT LOOP_BODY }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { ENTER_STMT LOOP_BODY ENTER_STMT } ENTER_STMT
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { LOOP_BODY ENTER_STMT } ENTER_STMT
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { ENTER_STMT LOOP_BODY } ENTER_STMT
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER_STMT { ENTER_STMT LOOP_BODY ENTER_STMT } ENTER_STMT
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER_STMT { LOOP_BODY ENTER_STMT } ENTER_STMT
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER_STMT { ENTER_STMT LOOP_BODY } ENTER_STMT

# . WHILE
WHILE_STMT -> WHILE ( EXP_STMT ) ENTER_STMT { ENTER_STMT LOOP_BODY ENTER_STMT }
WHILE_STMT -> WHILE ( EXP_STMT ) ENTER_STMT { LOOP_BODY ENTER_STMT }
WHILE_STMT -> WHILE ( EXP_STMT ) ENTER_STMT { ENTER_STMT LOOP_BODY }
WHILE_STMT -> WHILE ( EXP_STMT ) { ENTER_STMT LOOP_BODY ENTER_STMT }
WHILE_STMT -> WHILE ( EXP_STMT ) { LOOP_BODY ENTER_STMT }
WHILE_STMT -> WHILE ( EXP_STMT ) { ENTER_STMT LOOP_BODY }
WHILE_STMT -> WHILE ( EXP_STMT ) ENTER_STMT { ENTER_STMT LOOP_BODY ENTER_STMT } ENTER_STMT
WHILE_STMT -> WHILE ( EXP_STMT ) ENTER_STMT { LOOP_BODY ENTER_STMT } ENTER_STMT
WHILE_STMT -> WHILE ( EXP_STMT ) ENTER_STMT { ENTER_STMT LOOP_BODY } ENTER_STMT
WHILE_STMT -> WHILE ( EXP_STMT ) { ENTER_STMT LOOP_BODY ENTER_STMT } ENTER_STMT
WHILE_STMT -> WHILE ( EXP_STMT ) { LOOP_BODY ENTER_STMT } ENTER_STMT
WHILE_STMT -> WHILE ( EXP_STMT ) { ENTER_STMT LOOP_BODY } ENTER_STMT

# . VARIABLES
DEFS_STMT -> DEFS ENTER_STMT
DEFS_STMT -> DEFS
DEFS_STMT -> VAR_STMT 
DEFS_STMT -> VAR_STMT ENTER_STMT
DEFS_STMT -> LET_STMT 
DEFS_STMT -> LET_STMT ENTER_STMT
DEFS_STMT -> CONST_STMT 
DEFS_STMT -> CONST_STMT ENTER_STMT

DEFS -> VAR_NAME = DATA
DEFS -> VAR_NAME = DATA , DEFS
DEFS -> VAR_NAME
DEFS -> VAR_NAME , DEFS
DEFS -> VAR_NAME = DATA
DEFS -> VAR_NAME = DATA , DEFS
LET_STMT -> LET DEFS
CONST_STMT -> CONST DEFS
VAR_STMT -> VAR DEFS

# ------- DATA TYPES -------
DATA -> INT
DATA -> STRING
DATA -> NUMBER
DATA -> BOOLEAN
DATA -> NULL
DATA -> OBJECT
DATA -> ARRAY
DATA -> FUNCTION_CALL
DATA -> VAR_NAME
DATA -> EXPRESSION
DATA -> EXP_STMT
BOOLEAN -> TRUE
BOOLEAN -> FALSE
STRING -> VAR_NAME
STRING -> VAR_NAME STRING

# . ARRAY
ARRAY -> [ ARRAY_BODY ]
ARRAY_BODY -> DATA
ARRAY_BODY -> DATA , ARRAY_BODY

# -------- OBJECT STATEMENT --------
OBJECT_STMT -> OBJECT . VAR_NAME ( DATA ( DATA ) ) ENTER_STMT
OBJECT_STMT -> OBJECT . VAR_NAME ( DATA ) ENTER_STMT
OBJECT_STMT -> OBJECT . VAR_NAME ( ) ENTER_STMT
OBJECT_STMT -> OBJECT . VAR_NAME

# . OBJECT
OBJECT -> { ENTER_STMT OBJECT_BODY ENTER_STMT }
OBJECT -> VAR_NAME
OBJECT -> VAR_NAME . VAR_NAME
OBJECT_BODY -> VAR_NAME : DATA
OBJECT_BODY -> VAR_NAME : DATA , OBJECT_BODY
DELETE_STMT -> DELETE OBJECT

ENTER_STMT -> ENTER
ENTER_STMT -> ENTER ENTER_STMT

# -------- EXPRESSION AND VARIABLES --------
EXP_STMT -> EXPRESSION
EXP_STMT -> DATA
EXP_STMT -> VAR_NAME
EXP_STMT -> VAR_NAME EXPRESSION

@