# -------- START --------
START -> GENERAL_STMT

# -------- GENERAL STATEMENT --------
GENERAL_STMT -> IF_STMT
GENERAL_STMT -> DEFS_STMT
GENERAL_STMT -> TRY_CATCH
GENERAL_STMT -> THROW_STMT
GENERAL_STMT -> ENTER
GENERAL_STMT -> GENERAL_STMT ENTER
GENERAL_STMT -> FUNCTION_STMT
GENERAL_STMT -> LOOP_STMT
GENERAL_STMT -> DELETE_STMT

# -------- CONDITIONAL STATEMENT --------
CONDITIONAL_BODY -> SWITCH_STMT
CONDITIONAL_BODY -> IF_STMT
GENERAL_STMT -> DEFS_STMT
GENERAL_STMT -> TRY_CATCH
GENERAL_STMT -> THROW_STMT
CONDITIONAL_BODY -> CONDITIONAL_BODY
CONDITIONAL_BODY -> CONDITIONAL_BODY ENTER CONDITIONAL_BODY

# . IF ELIF ELSE
IF_STMT -> IF ( EXPRESSION ) ENTER { CONDITIONAL_BODY }
IF_STMT -> IF ( EXPRESSION ) ENTER { EXPRESSION }
IF_STMT -> IF ( EXPRESSION ) { CONDITIONAL_BODY }
IF_STMT -> IF ( EXPRESSION ) { EXPRESSION }
IF_STMT -> IF ( EXPRESSION ) ENTER { CONDITIONAL_BODY } IF_PART_A
IF_STMT -> IF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_A
IF_STMT -> IF ( EXPRESSION ) { CONDITIONAL_BODY } IF_PART_A
IF_STMT -> IF ( EXPRESSION ) { EXPRESSION } IF_PART_A
IF_PART_A -> ELIF ( EXPRESSION ) { CONDITIONAL_BODY }
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { CONDITIONAL_BODY }
IF_PART_A -> ELIF ( EXPRESSION ) { EXPRESSION }
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { EXPRESSION }
IF_PART_A -> ELIF ( EXPRESSION ) { CONDITIONAL_BODY } IF_PART_A
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { CONDITIONAL_BODY } IF_PART_A
IF_PART_A -> ELIF ( EXPRESSION ) { EXPRESSION } IF_PART_A
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_A
IF_PART_A -> ELIF ( EXPRESSION ) { CONDITIONAL_BODY } IF_PART_B
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { CONDITIONAL_BODY } IF_PART_B
IF_PART_A -> ELIF ( EXPRESSION ) { EXPRESSION } IF_PART_B
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_B
IF_STMT -> IF ( EXPRESSION ) ENTER { CONDITIONAL_BODY } IF_PART_B
IF_STMT -> IF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_B
IF_STMT -> IF ( EXPRESSION ) { CONDITIONAL_BODY } IF_PART_B
IF_STMT -> IF ( EXPRESSION ) { EXPRESSION } IF_PART_B
IF_PART_B -> ELSE { CONDITIONAL_BODY }
IF_PART_B -> ELSE ENTER { CONDITIONAL_BODY }
IF_PART_B -> ELSE { EXPRESSION }
IF_PART_B -> ELSE ENTER { EXPRESSION }

# . SWITCH STATEMENT
SWITCH_STMT -> SWITCH ( VAR_NAME ) ENTER { ENTER CASE_STMT ENTER }
SWITCH_STMT -> SWITCH ( VAR_NAME ) ENTER { ENTER CASE_DEF ENTER }

CASE_DEF -> DEFAULT : ENTER EXPRESSION
CASE_DEF -> DEFAULT : ENTER CONDITIONAL_STMT
CASE_DEF -> DEFAULT : ENTER GENERAL_STMT
CASE_DEF -> DEFAULT : ENTER
CASE_STMT -> CASE INT : ENTER EXPRESSION ENTER CASE_DEF
CASE_STMT -> CASE INT : ENTER CONDITIONAL_STMT ENTER CASE_DEF
CASE_STMT -> CASE INT : ENTER GENERAL_STMT ENTER CASE_DEF
CASE_STMT -> CASE INT : ENTER CASE_DEF

# . FUNCTION
FUNCTION_STMT -> FUNCTION
FUNCTION_STMT -> ASYNC_FUNCTION
FUNCTION_STMT -> FUNCTION_CALL

FUNCTION_BODY -> GENERAL_STMT
FUNCTION_BODY -> RETURN_STMT
FUNCTION_BODY -> FUNCTION_BODY ENTER FUNCTION_BODY
FUNCTION_BODY_ASYNC -> FUNCTION_BODY
FUNCTION_BODY_ASYNC -> AWAIT FUNCTION_BODY

FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER FUNCTION_BODY 
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER { ENTER FUNCTION_BODY ENTER }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER { ENTER FUNCTION_BODY }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER FUNCTION_BODY 
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER { ENTER FUNCTION_BODY ENTER }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER { ENTER FUNCTION_BODY }
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER FUNCTION_BODY ENTER
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER { ENTER FUNCTION_BODY ENTER } ENTER
FUNCTION -> FUNCTION_C FUNCTION_NAME ( PARAMS ) ENTER { ENTER FUNCTION_BODY } ENTER
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER FUNCTION_BODY ENTER
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER { ENTER FUNCTION_BODY ENTER } ENTER
FUNCTION -> FUNCTION_C FUNCTION_NAME ( ) ENTER { ENTER FUNCTION_BODY } ENTER
ASYNC_FUNCTION -> ASYNC FUNCTION FUNCTION_NAME ( PARAMS ) ENTER FUNCTION_BODY_ASYNC 
PARAMS -> VAR_NAME
PARAMS -> VAR_NAME , PARAMS
PARAMS -> VAR_NAME = DATA
PARAMS -> VAR_NAME = DATA , PARAMS
FUNCTION_NAME -> VAR_NAME
FUNCTION_CALL -> FUNCTION_NAME ( ARGS ) ENTER
FUNCTION_CALL -> CLASS . FUNCTION_NAME ( ARGS ) ENTER
CLASS -> VAR_NAME
ARGS -> DATA
ARGS -> DATA , ARGS
ARGS -> VAR_NAME = DATA
ARGS -> VAR_NAME = DATA , ARGS
RETURN_STMT -> RETURN DATA ENTER

# -------- LOOP --------
LOOP_STMT -> DO_WHILE
LOOP_STMT -> WHILE_STMT
LOOP_STMT -> FOR_STMT
LOOP_STMT -> FOR_IN
LOOP_STMT -> FOR_OF
LOOP_STMT -> FOR_AWAIT_OF 
LOOP_BODY -> GENERAL_STMT
LOOP_BODY -> ENTER
LOOP_BODY -> CONTINUE
LOOP_BODY -> LOOP_BODY ENTER LOOP_BODY
LOOP_BODY -> LOOP_BODY ENTER

# . DO WHILE
DO_WHILE -> DO { ENTER LOOP_BODY ENTER } WHILE ( EXPRESSION ) ENTER
DO_WHILE -> DO ENTER { ENTER LOOP_BODY ENTER } WHILE ( EXPRESSION ) ENTER
DO_WHILE -> DO { ENTER LOOP_BODY ENTER } WHILE ( EXPRESSION ) ENTER
DO_WHILE -> DO { ENTER LOOP_BODY ENTER } WHILE ( EXPRESSION )
DO_WHILE -> DO ENTER { ENTER LOOP_BODY ENTER } WHILE ( EXPRESSION )
DO_WHILE -> DO { ENTER LOOP_BODY ENTER } WHILE ( EXPRESSION )

# . FOR
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { ENTER LOOP_BODY ENTER }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER { ENTER LOOP_BODY ENTER }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { ENTER LOOP_BODY ENTER } ENTER
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER { ENTER LOOP_BODY ENTER } ENTER

# . FOR IN
FOR_IN -> FOR ( VAR_NAME IN OBJECT ) ENTER { ENTER LOOP_BODY ENTER }
FOR_IN -> FOR ( VAR_NAME IN OBJECT ) { ENTER LOOP_BODY ENTER }
FOR_IN -> FOR ( VAR_NAME IN OBJECT ) ENTER { ENTER LOOP_BODY ENTER } ENTER
FOR_IN -> FOR ( VAR_NAME IN OBJECT ) { ENTER LOOP_BODY ENTER } ENTER

# . FOR OF
FOR_OF -> FOR ( VAR_NAME OF OBJECT ) ENTER LOOP_BODY 
FOR_OF -> FOR ( VAR_NAME OF OBJECT ) { ENTER LOOP_BODY ENTER }
FOR_OF -> FOR ( VAR_NAME OF OBJECT ) ENTER LOOP_BODY ENTER
FOR_OF -> FOR ( VAR_NAME OF OBJECT ) { ENTER LOOP_BODY ENTER } ENTER

# . FOR AWAIT ... OF
FOR_AWAIT_OF -> FOR AWAIT ( VAR_NAME OF OBJECT ) ENTER { ENTER LOOP_BODY }
FOR_AWAIT_OF -> FOR AWAIT ( VAR_NAME OF OBJECT ) { ENTER LOOP_BODY }
FOR_AWAIT_OF -> FOR AWAIT ( VAR_NAME OF OBJECT ) ENTER { ENTER LOOP_BODY }
FOR_AWAIT_OF -> FOR AWAIT ( VAR_NAME OF OBJECT ) { ENTER LOOP_BODY ENTER }

# . WHILE
WHILE_STMT -> WHILE ( EXPRESSION ) ENTER { ENTER LOOP_BODY ENTER }
WHILE_STMT -> WHILE ( EXPRESSION ) { ENTER LOOP_BODY ENTER }
WHILE_STMT -> WHILE ( EXPRESSION ) ENTER { ENTER LOOP_BODY ENTER } ENTER
WHILE_STMT -> WHILE ( EXPRESSION ) { ENTER LOOP_BODY ENTER } ENTER

# -------- DELETE STATEMENT --------
DELETE_STMT -> DELETE OBJECT

# . VARIABLES
DEFS_STMT -> DEFS ENTER
DEFS_STMT -> DEFS
DEFS_STMT -> VAR_STMT 
DEFS_STMT -> VAR_STMT ENTER
DEFS_STMT -> LET_STMT 
DEFS_STMT -> LET_STMT ENTER
DEFS_STMT -> CONST_STMT 
DEFS_STMT -> CONST_STMT ENTER

DEFS -> VAR_NAME = DATA
DEFS -> VAR_NAME = DATA , DEFS
DEFS -> VAR_NAME
DEFS -> VAR_NAME , DEFS
DEFS -> VAR_NAME = DATA
DEFS -> VAR_NAME = DATA , DEFS
LET_STMT -> LET DEFS
CONST_STMT -> CONST DEFS
VAR_STMT -> VAR DEFS

# ------- DATA TYPES -------
DATA -> INT
DATA -> STRING
DATA -> NUMBER
DATA -> BOOLEAN
DATA -> NULL
DATA -> OBJECT
DATA -> ARRAY
DATA -> FUNCTION_CALL
DATA -> VAR_NAME
DATA -> EXPRESSION
BOOLEAN -> TRUE
BOOLEAN -> FALSE

# -------- TRY CATCH -------- (finally also included)
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER }  CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER }  CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER } FINALLY ENTER { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) ENTER { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY ENTER { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }
TRY_CATCH -> TRY { ENTER GENERAL_STMT ENTER } CATCH ( VAR_NAME ) { ENTER GENERAL_STMT ENTER } FINALLY { ENTER GENERAL_STMT ENTER }

# -------- THROW --------
THROW_STMT -> THROW_STMT ENTER
THROW_STMT -> THROW VAR_NAME
THROW_STMT -> THROW DATA
THROW_STMT -> THROW FUNCTION_CALL

# . OBJECT
OBJECT -> { ENTER OBJECT_BODY ENTER }
OBJECT -> VAR_NAME
OBJECT_BODY -> VAR_NAME : DATA
OBJECT_BODY -> VAR_NAME : DATA , OBJECT_BODY

# . ARRAY
ARRAY -> [ ARRAY_BODY ]
ARRAY_BODY -> DATA
ARRAY_BODY -> DATA , ARRAY_BODY

# -------- ENTER_STMT --------
ENTER -> ENTER ENTER
ENTER -> ENTER

@