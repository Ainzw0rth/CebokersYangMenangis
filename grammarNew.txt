# -------- START --------
START -> GENERAL_STMT

# -------- GENERAL STATEMENT --------
GENERAL_STMT -> CONDITIONAL_BODY
GENERAL_STMT -> DEFS_STMT
GENERAL_STMT -> TRY_CATCH
GENERAL_STMT -> THROW_STMT
GENERAL_STMT -> ENTER
GENERAL_STMT -> GENERAL_STMT ENTER
GENERAL_STMT -> FUNCTION_STMT
GENERAL_STMT -> LOOP_STMT
GENERAL_STMT -> DELETE_STMT
GENERAL_STMT -> CONSOLE_STMT

CONDITIONAL_BODY -> SWITCH_STMT
CONDITIONAL_BODY -> IF_STMT
CONDITIONAL_BODY -> GENERAL_STMT
CONDITIONAL_BODY -> CONDITIONAL_BODY
CONDITIONAL_BODY -> CONDITIONAL_BODY ENTER CONDITIONAL_BODY

# . IF ELIF ELSE
IF_STMT -> IF ( EXPRESSION ) ENTER { CONDITIONAL_BODY }
IF_STMT -> IF ( EXPRESSION ) ENTER { EXPRESSION }
IF_STMT -> IF ( EXPRESSION ) { CONDITIONAL_BODY }
IF_STMT -> IF ( EXPRESSION ) { EXPRESSION }
IF_STMT -> IF ( EXPRESSION ) ENTER { CONDITIONAL_BODY } IF_PART_A
IF_STMT -> IF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_A
IF_STMT -> IF ( EXPRESSION ) { CONDITIONAL_BODY } IF_PART_A
IF_STMT -> IF ( EXPRESSION ) { EXPRESSION } IF_PART_A
IF_PART_A -> ELIF ( EXPRESSION ) { CONDITIONAL_BODY }
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { CONDITIONAL_BODY }
IF_PART_A -> ELIF ( EXPRESSION ) { EXPRESSION }
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { EXPRESSION }
IF_PART_A -> ELIF ( EXPRESSION ) { CONDITIONAL_BODY } IF_PART_A
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { CONDITIONAL_BODY } IF_PART_A
IF_PART_A -> ELIF ( EXPRESSION ) { EXPRESSION } IF_PART_A
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_A
IF_PART_A -> ELIF ( EXPRESSION ) { CONDITIONAL_BODY } IF_PART_B
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { CONDITIONAL_BODY } IF_PART_B
IF_PART_A -> ELIF ( EXPRESSION ) { EXPRESSION } IF_PART_B
IF_PART_A -> ELIF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_B
IF_STMT -> IF ( EXPRESSION ) ENTER { CONDITIONAL_BODY } IF_PART_B
IF_STMT -> IF ( EXPRESSION ) ENTER { EXPRESSION } IF_PART_B
IF_STMT -> IF ( EXPRESSION ) { CONDITIONAL_BODY } IF_PART_B
IF_STMT -> IF ( EXPRESSION ) { EXPRESSION } IF_PART_B
IF_PART_B -> ELSE { CONDITIONAL_BODY }
IF_PART_B -> ELSE ENTER { CONDITIONAL_BODY }
IF_PART_B -> ELSE { EXPRESSION }
IF_PART_B -> ELSE ENTER { EXPRESSION }

# . SWITCH STATEMENT
SWITCH_STMT -> SWITCH ( VAR_NAME ) ENTER { ENTER CASE_STMT ENTER }
SWITCH_STMT -> SWITCH ( VAR_NAME ) ENTER { ENTER CASE_DEF ENTER }

CASE_DEF -> DEFAULT : ENTER EXPRESSION
CASE_DEF -> DEFAULT : ENTER CONDITIONAL_STMT
CASE_DEF -> DEFAULT : ENTER GENERAL_STMT
CASE_DEF -> DEFAULT : ENTER
CASE_STMT -> CASE INT : ENTER EXPRESSION ENTER CASE_DEF
CASE_STMT -> CASE INT : ENTER CONDITIONAL_STMT ENTER CASE_DEF
CASE_STMT -> CASE INT : ENTER GENERAL_STMT ENTER CASE_DEF
CASE_STMT -> CASE INT : ENTER CASE_DEF

# . VARIABLES
DEFS_STMT -> DEFS ENTER
DEFS_STMT -> DEFS
DEFS_STMT -> VAR_STMT 
DEFS_STMT -> VAR_STMT ENTER
DEFS_STMT -> LET_STMT 
DEFS_STMT -> LET_STMT ENTER
DEFS_STMT -> CONST_STMT 
DEFS_STMT -> CONST_STMT ENTER

# . WHILE
WHILE_STMT -> WHILE ( EXPRESSION ) ENTER { ENTER LOOP_BODY ENTER }
WHILE_STMT -> WHILE ( EXPRESSION ) { ENTER LOOP_BODY ENTER }
WHILE_STMT -> WHILE ( EXPRESSION ) ENTER { ENTER LOOP_BODY ENTER } ENTER
WHILE_STMT -> WHILE ( EXPRESSION ) { ENTER LOOP_BODY ENTER } ENTER

# . FOR
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { ENTER LOOP_BODY ENTER }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER { ENTER LOOP_BODY ENTER }
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) { ENTER LOOP_BODY ENTER } ENTER
FOR_STMT -> FOR ( DEFS ; EXPRESSION ; EXPRESSION ) ENTER { ENTER LOOP_BODY ENTER } ENTER

DEFS -> VAR_NAME = DATA
DEFS -> VAR_NAME = DATA , DEFS
DEFS -> VAR_NAME
DEFS -> VAR_NAME , DEFS
DEFS -> VAR_NAME = DATA
DEFS -> VAR_NAME = DATA , DEFS
LET_STMT -> LET DEFS
CONST_STMT -> CONST DEFS
VAR_STMT -> VAR DEFS

# -------- CONSOLE STATEMENT --------
CONSOLE_STMT -> VAR_NAME . VAR_NAME ( VAR_NAME ( VAR_NAME ) ) ENTER

DELETE_STMT -> DELETE OBJECT

@